import streamlit as st
import requests
import pandas as pd
import datetime
import random
import matplotlib.pyplot as plt
import os
from dotenv import load_dotenv

# --- Configuration ---
load_dotenv()  # Load environment variables from .env file

# Constants
BASE_URL = "https://api.openweathermap.org/data/2.5/weather"
FORECAST_URL = "https://api.openweathermap.org/data/2.5/forecast"
UNITS = "metric"
CACHE_TTL = 600  # 10 minutes in seconds
DEFAULT_CITIES = ["London", "New York", "Tokyo", "Paris", "Sydney"]

# Weather condition emojis
WEATHER_EMOJIS = {
    "clear": "☀️",
    "clouds": "☁️",
    "rain": "🌧️",
    "thunderstorm": "⛈️",
    "snow": "❄️",
    "mist": "🌫️",
    "drizzle": "🌦️",
    "fog": "🌁",
    "haze": "😶‍🌫️"
}

# --- Streamlit Setup ---
st.set_page_config(
    page_title="Weather Dashboard",
    page_icon="🌦️",
    layout="centered",
    initial_sidebar_state="expanded"
)

# --- Helper Functions ---
def get_api_key():
    """Retrieve API key from environment variables"""
    api_key = os.getenv("OPENWEATHER_API_KEY")
    if not api_key:
        st.error("API key not configured. Please set OPENWEATHER_API_KEY in your .env file")
        st.stop()
    return api_key

@st.cache_data(ttl=CACHE_TTL)
def fetch_weather_data(city_name):
    """Fetch weather data with comprehensive error handling"""
    api_key = get_api_key()
    params = {
        'q': city_name,
        'appid': api_key,
        'units': UNITS
    }
    
    try:
        response = requests.get(BASE_URL, params=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Error fetching data: {str(e)}")
        st.stop()

def display_weather_card(data):
    """Display weather information in card format"""
    weather = data["weather"][0]
    main = data["main"]
    wind = data["wind"]
    
    condition = weather["main"].lower()
    emoji = WEATHER_EMOJIS.get(condition, "🌫️")
    
    st.subheader(f"{emoji} Current Weather in {data['name']}")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Temperature", f"{main['temp']:.1f} °C")
        st.metric("Humidity", f"{main['humidity']}%")
    with col2:
        st.metric("Feels Like", f"{main['feels_like']:.1f} °C")
        st.metric("Pressure", f"{main['pressure']} hPa")
    with col3:
        st.metric("Wind Speed", f"{wind['speed']} m/s")
        st.metric("Conditions", weather["description"].title())

def generate_mock_history(base_temp, base_humidity, days=5):
    """Generate realistic mock historical data"""
    dates = [
        (datetime.datetime.now() - datetime.timedelta(days=i)).strftime("%Y-%m-%d") 
        for i in range(days, 0, -1)
    ]
    
    return pd.DataFrame({
        "Date": dates,
        "Temperature": [round(base_temp + random.uniform(-3, 3), 1) for _ in dates],
        "Humidity": [max(30, min(100, base_humidity + random.randint(-15, 15))) for _ in dates],
        "Precipitation": [round(random.uniform(0, 10), 1) for _ in dates]
    })

def create_matplotlib_visualizations(df):
    """Create visualizations using only Matplotlib"""
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 12))
    
    # Temperature plot
    ax1.plot(df["Date"], df["Temperature"], 'r-o')
    ax1.fill_between(df["Date"], df["Temperature"], alpha=0.1, color='red')
    ax1.set_title("Temperature Trend (°C)")
    ax1.grid(True)
    
    # Humidity plot
    ax2.plot(df["Date"], df["Humidity"], 'b-o')
    ax2.fill_between(df["Date"], df["Humidity"], alpha=0.1, color='blue')
    ax2.set_title("Humidity Trend (%)")
    ax2.grid(True)
    
    # Precipitation plot
    ax3.bar(df["Date"], df["Precipitation"], color='skyblue')
    ax3.set_title("Precipitation (mm)")
    ax3.grid(True)
    
    plt.tight_layout()
    st.pyplot(fig)

# --- Main Application ---
def main():
    st.title("🌦️ Weather Dashboard")
    
    # Sidebar
    with st.sidebar:
        st.header("Quick Access")
        for city in DEFAULT_CITIES:
            if st.button(city):
                st.session_state.city = city
                st.rerun()
    
    # City input
    city = st.text_input("Enter city name:", "London").strip()
    
    if st.button("Get Weather"):
        with st.spinner("Fetching weather data..."):
            weather_data = fetch_weather_data(city)
            display_weather_card(weather_data)
            
            st.divider()
            st.subheader("📈 Historical Trends")
            
            mock_data = generate_mock_history(
                base_temp=weather_data["main"]["temp"],
                base_humidity=weather_data["main"]["humidity"]
            )
            
            create_matplotlib_visualizations(mock_data)
            
            # Data export
            st.download_button(
                label="📥 Download Data",
                data=mock_data.to_csv(index=False),
                file_name=f"{city}_weather.csv"
            )

if __name__ == "__main__":
    main()
