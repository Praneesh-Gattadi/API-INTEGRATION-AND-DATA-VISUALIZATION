import streamlit as st
import requests
import pandas as pd
import datetime
import random
import plotly.express as px
import os
from dotenv import load_dotenv

# --- Configuration ---
load_dotenv()  # Load environment variables from .env file

# Constants
BASE_URL = "https://api.openweathermap.org/data/2.5/weather"
UNITS = "metric"
CACHE_TTL = 600  # 10 minutes in seconds

# Weather condition emojis
WEATHER_EMOJIS = {
    "clear": "☀️",
    "clouds": "☁️",
    "rain": "🌧️",
    "thunderstorm": "⛈️",
    "snow": "❄️",
    "mist": "🌫️",
    "drizzle": "🌦️"
}

# --- Streamlit Setup ---
st.set_page_config(
    page_title="Weather Dashboard Pro",
    page_icon="🌦️",
    layout="centered"
)

# --- Helper Functions ---
def get_api_key():
    """Retrieve API key from environment variables"""
    api_key = os.getenv("OPENWEATHER_API_KEY")
    if not api_key:
        st.error("API key not configured. Please set OWM_API_KEY in your .env file")
        st.stop()
    return api_key

@st.cache_data(ttl=CACHE_TTL)
def fetch_weather_data(city_name):
    """Fetch weather data with comprehensive error handling"""
    api_key = get_api_key()
    url = f"{BASE_URL}?q={city_name}&appid={api_key}&units={UNITS}"
    
    try:
        response = requests.get(url, timeout=10)
        
        # Handle specific error cases
        if response.status_code == 404:
            st.error(f"❌ City '{city_name}' not found. Please check the spelling and try again.")
            st.stop()
        elif response.status_code == 401:
            st.error("⚠️ Invalid API key. Please check your OpenWeatherMap API key.")
            st.stop()
        elif response.status_code == 429:
            st.error("🔒 API rate limit exceeded. Please wait and try again later.")
            st.stop()
            
        response.raise_for_status()
        return response.json()
        
    except requests.exceptions.Timeout:
        st.error("⌛ Request timed out. Please check your internet connection and try again.")
        st.stop()
    except requests.exceptions.ConnectionError:
        st.error("🌐 Network connection error. Please check your internet connection.")
        st.stop()
    except Exception as e:
        st.error(f"⚠️ An unexpected error occurred: {str(e)}")
        st.stop()

def display_weather_card(data):
    """Display weather information in card format"""
    weather = data["weather"][0]
    main = data["main"]
    wind = data["wind"]
    sys = data["sys"]
    
    # Get appropriate emoji
    condition = weather["main"].lower()
    emoji = WEATHER_EMOJIS.get(condition, "🌫️")
    
    st.subheader(f"{emoji} Current Weather in {data['name']}")
    
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Description", weather["description"].title())
        st.metric("Temperature", f"{main['temp']:.1f} °C")
        st.metric("Feels Like", f"{main['feels_like']:.1f} °C")
        st.metric("Humidity", f"{main['humidity']}%")
        
    with col2:
        st.metric("Wind Speed", f"{wind['speed']} m/s")
        st.metric("Pressure", f"{main['pressure']} hPa")
        st.metric("Visibility", f"{data.get('visibility', 'N/A')} m")
        st.metric("Sunrise/Sunset", f"{format_time(sys['sunrise'])} / {format_time(sys['sunset'])}")

def format_time(timestamp):
    """Convert timestamp to readable time"""
    return datetime.datetime.fromtimestamp(timestamp).strftime("%H:%M")

def generate_mock_history(base_temp, base_humidity, days=5):
    """Generate realistic mock historical data"""
    dates = [
        (datetime.datetime.now() - datetime.timedelta(days=i)).strftime("%Y-%m-%d") 
        for i in range(days, 0, -1)
    ]
    
    return pd.DataFrame({
        "Date": dates,
        "Temperature (°C)": [
            round(base_temp + random.uniform(-3, 3), 1) 
            for _ in dates
        ],
        "Humidity (%)": [
            max(30, min(100, base_humidity + random.randint(-15, 15)))
            for _ in dates
        ]
    })

def create_visualizations(df):
    """Create interactive visualizations"""
    tab1, tab2 = st.tabs(["Temperature", "Humidity"])
    
    with tab1:
        fig = px.line(
            df, 
            x="Date", 
            y="Temperature (°C)",
            title="Temperature Trend (Last 5 Days)",
            markers=True
        )
        fig.update_traces(line_color='red', fill='tozeroy')
        st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        fig = px.line(
            df, 
            x="Date", 
            y="Humidity (%)",
            title="Humidity Trend (Last 5 Days)",
            markers=True
        )
        fig.update_traces(line_color='blue', fill='tozeroy')
        st.plotly_chart(fig, use_container_width=True)

# --- Main Application ---
st.title("🌦️ Advanced Weather Dashboard")

# City input with session state
if 'city' not in st.session_state:
    st.session_state.city = "London"

city = st.text_input(
    "Enter city name:", 
    value=st.session_state.city,
    key="city_input",
    help="Enter a valid city name (e.g., 'Paris', 'New York')"
).strip()

if st.button("Get Weather", type="primary"):
    if not city:
        st.warning("⚠️ Please enter a city name")
        st.stop()
    
    if not all(c.isalpha() or c.isspace() or c in "-'" for c in city):
        st.error("❌ Invalid city name. Please use only letters, spaces, hyphens, or apostrophes.")
        st.stop()
    
    with st.spinner("🔍 Searching for weather data..."):
        weather_data = fetch_weather_data(city)
        st.session_state.city = city  # Remember preference
        
        # Display current weather
        display_weather_card(weather_data)
        
        # Generate and display historical data
        st.divider()
        st.subheader("📈 Historical Trends")
        
        mock_data = generate_mock_history(
            base_temp=weather_data["main"]["temp"],
            base_humidity=weather_data["main"]["humidity"]
        )
        
        create_visualizations(mock_data)
        
        # Data export
        st.download_button(
            label="📥 Download Data as CSV",
            data=mock_data.to_csv(index=False),
            file_name=f"{city}_weather_data.csv",
            mime="text/csv",
            help="Download the historical weather data as a CSV file"
        )
